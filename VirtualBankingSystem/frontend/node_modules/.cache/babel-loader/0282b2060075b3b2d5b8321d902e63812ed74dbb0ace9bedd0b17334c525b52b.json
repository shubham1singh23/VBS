{"ast":null,"code":"import axios from 'axios';\nimport { fallbackAPI } from './api-fallback';\nconst API_BASE_URL = 'http://localhost:8080/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 10000 // 10 second timeout - increased for slower backends\n});\n\n// Helper function to check if we should use fallback\nconst shouldUseFallback = error => {\n  return error.code === 'ECONNREFUSED' || error.code === 'NETWORK_ERROR' || error.code === 'ECONNABORTED' || error.message.includes('Network Error') || error.message.includes('timeout');\n};\n\n// Customer API endpoints\nexport const customerAPI = {\n  // Register a new customer\n  register: async customerData => {\n    try {\n      const response = await api.post('/customers/register', customerData);\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message;\n    }\n  },\n  // Login customer\n  login: async (username, password) => {\n    try {\n      const response = await api.post('/customers/login', {\n        username,\n        password\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message;\n    }\n  },\n  // Get customer by ID\n  getCustomerById: async customerId => {\n    try {\n      const response = await api.get(`/customers/${customerId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message;\n    }\n  },\n  // Get customer balance\n  getBalance: async customerId => {\n    try {\n      console.log(`API: Getting balance for customer ${customerId}`);\n      const response = await api.get(`/customers/${customerId}/balance`);\n      console.log('API: Balance response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      console.error('API: Balance error:', error);\n\n      // If it's a timeout, try once more with longer timeout\n      if (error.code === 'ECONNABORTED') {\n        console.log('Retrying balance request with longer timeout...');\n        try {\n          const retryResponse = await api.get(`/customers/${customerId}/balance`, {\n            timeout: 15000\n          });\n          return retryResponse.data;\n        } catch (retryError) {\n          console.log('Balance retry also failed, using fallback');\n          return await fallbackAPI.getBalance(customerId);\n        }\n      }\n      if (shouldUseFallback(error)) {\n        console.log('Using fallback API for balance');\n        return await fallbackAPI.getBalance(customerId);\n      }\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message;\n    }\n  }\n};\n\n// Transaction API endpoints\nexport const transactionAPI = {\n  // Deposit money\n  deposit: async (customerId, amount, description) => {\n    try {\n      const response = await api.post('/transactions/deposit', {\n        customerId,\n        amount,\n        description\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message;\n    }\n  },\n  // Withdraw money\n  withdraw: async (customerId, amount, description) => {\n    try {\n      const response = await api.post('/transactions/withdraw', {\n        customerId,\n        amount,\n        description\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response6;\n      throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message;\n    }\n  },\n  // Get customer transactions\n  getTransactions: async customerId => {\n    try {\n      console.log(`API: Getting transactions for customer ${customerId}`);\n      const response = await api.get(`/transactions/customer/${customerId}`);\n      console.log('API: Transactions response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response7;\n      console.error('API: Transactions error:', error);\n\n      // If it's a timeout, try once more with longer timeout\n      if (error.code === 'ECONNABORTED') {\n        console.log('Retrying transactions request with longer timeout...');\n        try {\n          const retryResponse = await api.get(`/transactions/customer/${customerId}`, {\n            timeout: 15000\n          });\n          console.log('API: Transactions retry response:', retryResponse.data);\n          return retryResponse.data;\n        } catch (retryError) {\n          console.log('Transactions retry also failed, using fallback');\n          return await fallbackAPI.getTransactions(customerId);\n        }\n      }\n      if (shouldUseFallback(error)) {\n        console.log('Using fallback API for transactions');\n        return await fallbackAPI.getTransactions(customerId);\n      }\n      throw ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error.message;\n    }\n  },\n  // Get customer passbook\n  getPassbook: async customerId => {\n    try {\n      const response = await api.get(`/transactions/customer/${customerId}/passbook`);\n      return response.data;\n    } catch (error) {\n      var _error$response8;\n      throw ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || error.message;\n    }\n  },\n  // Get specific transaction\n  getTransaction: async transactionId => {\n    try {\n      const response = await api.get(`/transactions/${transactionId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response9;\n      throw ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data) || error.message;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","fallbackAPI","API_BASE_URL","api","create","baseURL","headers","timeout","shouldUseFallback","error","code","message","includes","customerAPI","register","customerData","response","post","data","_error$response","login","username","password","_error$response2","getCustomerById","customerId","get","_error$response3","getBalance","console","log","_error$response4","retryResponse","retryError","transactionAPI","deposit","amount","description","_error$response5","withdraw","_error$response6","getTransactions","_error$response7","getPassbook","_error$response8","getTransaction","transactionId","_error$response9"],"sources":["C:/Users/SHUBHAM/Desktop/VBS/VirtualBankingSystem/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport { fallbackAPI } from './api-fallback';\n\nconst API_BASE_URL = 'http://localhost:8080/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 10000, // 10 second timeout - increased for slower backends\n});\n\n// Helper function to check if we should use fallback\nconst shouldUseFallback = (error) => {\n  return error.code === 'ECONNREFUSED' || \n         error.code === 'NETWORK_ERROR' || \n         error.code === 'ECONNABORTED' ||\n         error.message.includes('Network Error') ||\n         error.message.includes('timeout');\n};\n\n// Customer API endpoints\nexport const customerAPI = {\n  // Register a new customer\n  register: async (customerData) => {\n    try {\n      const response = await api.post('/customers/register', customerData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  // Login customer\n  login: async (username, password) => {\n    try {\n      const response = await api.post('/customers/login', {\n        username,\n        password\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  // Get customer by ID\n  getCustomerById: async (customerId) => {\n    try {\n      const response = await api.get(`/customers/${customerId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  // Get customer balance\n  getBalance: async (customerId) => {\n    try {\n      console.log(`API: Getting balance for customer ${customerId}`);\n      const response = await api.get(`/customers/${customerId}/balance`);\n      console.log('API: Balance response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('API: Balance error:', error);\n      \n      // If it's a timeout, try once more with longer timeout\n      if (error.code === 'ECONNABORTED') {\n        console.log('Retrying balance request with longer timeout...');\n        try {\n          const retryResponse = await api.get(`/customers/${customerId}/balance`, { timeout: 15000 });\n          return retryResponse.data;\n        } catch (retryError) {\n          console.log('Balance retry also failed, using fallback');\n          return await fallbackAPI.getBalance(customerId);\n        }\n      }\n      \n      if (shouldUseFallback(error)) {\n        console.log('Using fallback API for balance');\n        return await fallbackAPI.getBalance(customerId);\n      }\n      throw error.response?.data || error.message;\n    }\n  }\n};\n\n// Transaction API endpoints\nexport const transactionAPI = {\n  // Deposit money\n  deposit: async (customerId, amount, description) => {\n    try {\n      const response = await api.post('/transactions/deposit', {\n        customerId,\n        amount,\n        description\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  // Withdraw money\n  withdraw: async (customerId, amount, description) => {\n    try {\n      const response = await api.post('/transactions/withdraw', {\n        customerId,\n        amount,\n        description\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  // Get customer transactions\n  getTransactions: async (customerId) => {\n    try {\n      console.log(`API: Getting transactions for customer ${customerId}`);\n      const response = await api.get(`/transactions/customer/${customerId}`);\n      console.log('API: Transactions response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('API: Transactions error:', error);\n      \n      // If it's a timeout, try once more with longer timeout\n      if (error.code === 'ECONNABORTED') {\n        console.log('Retrying transactions request with longer timeout...');\n        try {\n          const retryResponse = await api.get(`/transactions/customer/${customerId}`, { timeout: 15000 });\n          console.log('API: Transactions retry response:', retryResponse.data);\n          return retryResponse.data;\n        } catch (retryError) {\n          console.log('Transactions retry also failed, using fallback');\n          return await fallbackAPI.getTransactions(customerId);\n        }\n      }\n      \n      if (shouldUseFallback(error)) {\n        console.log('Using fallback API for transactions');\n        return await fallbackAPI.getTransactions(customerId);\n      }\n      throw error.response?.data || error.message;\n    }\n  },\n\n  // Get customer passbook\n  getPassbook: async (customerId) => {\n    try {\n      const response = await api.get(`/transactions/customer/${customerId}/passbook`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  // Get specific transaction\n  getTransaction: async (transactionId) => {\n    try {\n      const response = await api.get(`/transactions/${transactionId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  }\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}